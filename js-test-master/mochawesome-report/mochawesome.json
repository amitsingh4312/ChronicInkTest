{
  "stats": {
    "suites": 7,
    "tests": 19,
    "passes": 17,
    "pending": 0,
    "failures": 2,
    "start": "2021-08-24T21:52:19.170Z",
    "end": "2021-08-24T21:52:19.213Z",
    "duration": 43,
    "testsRegistered": 19,
    "passPercent": 89.5,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "17981b11-c827-4a98-bf01-858a1765da99",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "0e4e396e-cd14-4286-b11c-8b02f40dc4de",
        "title": "isPalindrome() function",
        "fullFile": "F:\\Homework\\chronicInkTattoosTest\\js-test-master\\js-test-master\\tasks\\1. Palindrome check\\__test__\\palindrome.test.js",
        "file": "\\tasks\\1. Palindrome check\\__test__\\palindrome.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should return FALSE if given input is not a palindrome",
            "fullTitle": "isPalindrome() function should return FALSE if given input is not a palindrome",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var inputString = 'ewqrfg';\nexpect((0, _palindrome.isPalindrome)(inputString)).to.equal(false);",
            "err": {},
            "isRoot": false,
            "uuid": "111894cb-66e0-482c-91d9-b9fa9fff836f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return TRUE if given input is a palindrome",
            "fullTitle": "isPalindrome() function should return TRUE if given input is a palindrome",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var inputString = 'racecar';\nexpect((0, _palindrome.isPalindrome)(inputString)).to.equal(true);",
            "err": {},
            "isRoot": false,
            "uuid": "adf79763-af39-48e6-a907-6a5b3fad1b64",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "111894cb-66e0-482c-91d9-b9fa9fff836f",
          "adf79763-af39-48e6-a907-6a5b3fad1b64"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "43b110ef-4875-47e0-9a44-3ab3a943cc39",
        "title": "getFibonacciUntil() function",
        "fullFile": "F:\\Homework\\chronicInkTattoosTest\\js-test-master\\js-test-master\\tasks\\2. Fibonacci - recursive\\__test__\\fibonacci.test.js",
        "file": "\\tasks\\2. Fibonacci - recursive\\__test__\\fibonacci.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should return the fibonacci numbers unil n in an array",
            "fullTitle": "getFibonacciUntil() function should return the fibonacci numbers unil n in an array",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var result = (0, _fibonacci.getFibonacciUntil)(7).toString();\nvar expected = '0,1,1,2,3,5,8';\nexpect(result).to.equal(expected);",
            "err": {},
            "isRoot": false,
            "uuid": "67edae5e-a28d-46be-9155-3879f0bccfe7",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "67edae5e-a28d-46be-9155-3879f0bccfe7"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "59b838e8-ad51-470c-b3cb-69d6c2bf7248",
        "title": "areParenthesesBalanced() function",
        "fullFile": "F:\\Homework\\chronicInkTattoosTest\\js-test-master\\js-test-master\\tasks\\3. Balanced parentheses\\__test__\\balancedParentheses.test.js",
        "file": "\\tasks\\3. Balanced parentheses\\__test__\\balancedParentheses.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should return FALSE if there are more opening parentheses",
            "fullTitle": "areParenthesesBalanced() function should return FALSE if there are more opening parentheses",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var input = '((((((())';\nexpect((0, _balancedParentheses.areParenthesesBalanced)(input)).to.equal(false);",
            "err": {},
            "isRoot": false,
            "uuid": "f8b3aaeb-3d54-42f8-a27b-775d2e156591",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return FALSE if there are more closing parentheses",
            "fullTitle": "areParenthesesBalanced() function should return FALSE if there are more closing parentheses",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var input = '()))';\nexpect((0, _balancedParentheses.areParenthesesBalanced)(input)).to.equal(false);",
            "err": {},
            "isRoot": false,
            "uuid": "a314e93c-a419-43e6-af26-f7fc3c578afd",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return FALSE if the numbers are equal, but the order is wrong",
            "fullTitle": "areParenthesesBalanced() function should return FALSE if the numbers are equal, but the order is wrong",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var input = '())(()';\nexpect((0, _balancedParentheses.areParenthesesBalanced)(input)).to.equal(false);",
            "err": {},
            "isRoot": false,
            "uuid": "18341d44-d2ef-4b8b-ae3c-72a207a2de62",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return TRUE if the parentheses are correct",
            "fullTitle": "areParenthesesBalanced() function should return TRUE if the parentheses are correct",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var input = '(()((())()))';\nexpect((0, _balancedParentheses.areParenthesesBalanced)(input)).to.equal(true);",
            "err": {},
            "isRoot": false,
            "uuid": "921d4e1e-0073-41c1-b2c6-66ef9045aca5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return TRUE if the input contains 0 parentheses",
            "fullTitle": "areParenthesesBalanced() function should return TRUE if the input contains 0 parentheses",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var input = 'there are no parentheses';\nexpect((0, _balancedParentheses.areParenthesesBalanced)(input)).to.equal(true);",
            "err": {},
            "isRoot": false,
            "uuid": "83b67f04-fa56-4f57-a6fb-2d4a59482ef6",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "f8b3aaeb-3d54-42f8-a27b-775d2e156591",
          "a314e93c-a419-43e6-af26-f7fc3c578afd",
          "18341d44-d2ef-4b8b-ae3c-72a207a2de62",
          "921d4e1e-0073-41c1-b2c6-66ef9045aca5",
          "83b67f04-fa56-4f57-a6fb-2d4a59482ef6"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "475a99bc-146d-4127-830b-df5b82929812",
        "title": "getFizzBuzzUntil() function",
        "fullFile": "F:\\Homework\\chronicInkTattoosTest\\js-test-master\\js-test-master\\tasks\\4. FizzBuzz\\__test__\\fizzbuzz.test.js",
        "file": "\\tasks\\4. FizzBuzz\\__test__\\fizzbuzz.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should return an array with numbers divisible by 3 replaced by 'Fizz' ",
            "fullTitle": "getFizzBuzzUntil() function should return an array with numbers divisible by 3 replaced by 'Fizz' ",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(result[2]).to.equal('Fizz');\nexpect(result[5]).to.equal('Fizz');\nexpect(result[8]).to.equal('Fizz');\nexpect(result[11]).to.equal('Fizz');",
            "err": {},
            "isRoot": false,
            "uuid": "52bd37a6-9108-453d-bf01-cff8e62cea46",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return an array with numbers divisible by 5 replaced by 'Buzz' ",
            "fullTitle": "getFizzBuzzUntil() function should return an array with numbers divisible by 5 replaced by 'Buzz' ",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(result[4]).to.equal('Buzz');\nexpect(result[9]).to.equal('Buzz');",
            "err": {},
            "isRoot": false,
            "uuid": "b11e3e36-8072-4cf3-8261-5f8fb0603bb0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return an array with numbers divisible by 15 replaced by 'FizzBuzz' ",
            "fullTitle": "getFizzBuzzUntil() function should return an array with numbers divisible by 15 replaced by 'FizzBuzz' ",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(result[14]).to.equal('FizzBuzz');",
            "err": {},
            "isRoot": false,
            "uuid": "776cf07b-ce56-437b-9860-46e094336913",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "52bd37a6-9108-453d-bf01-cff8e62cea46",
          "b11e3e36-8072-4cf3-8261-5f8fb0603bb0",
          "776cf07b-ce56-437b-9860-46e094336913"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "319359dc-a8b5-43e8-9894-ddd7bf810e04",
        "title": "encryptCaesar() function",
        "fullFile": "F:\\Homework\\chronicInkTattoosTest\\js-test-master\\js-test-master\\tasks\\5. Caesar cipher\\__test__\\caesar.test.js",
        "file": "\\tasks\\5. Caesar cipher\\__test__\\caesar.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should encrypt 'GAMEOFTHRONES' to HBNFPGUISPOFT with key 1",
            "fullTitle": "encryptCaesar() function should encrypt 'GAMEOFTHRONES' to HBNFPGUISPOFT with key 1",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect((0, _caesar.encryptCaesar)('GAMEOFTHRONES', 1)).to.equal('HBNFPGUISPOFT');",
            "err": {},
            "isRoot": false,
            "uuid": "0455923d-d40e-40e5-a151-bb932f3d1507",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should encrypt 'GAMEOFTHRONES' to JDPHRIWKURQHV with key 3",
            "fullTitle": "encryptCaesar() function should encrypt 'GAMEOFTHRONES' to JDPHRIWKURQHV with key 3",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect((0, _caesar.encryptCaesar)('GAMEOFTHRONES', 3)).to.equal('JDPHRIWKURQHV');",
            "err": {},
            "isRoot": false,
            "uuid": "265bbf40-7c9a-4540-8340-e10072e21a1d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should rotate/wrap around letters",
            "fullTitle": "encryptCaesar() function should rotate/wrap around letters",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect((0, _caesar.encryptCaesar)('XYZ', 4)).to.equal('BCD');",
            "err": {},
            "isRoot": false,
            "uuid": "3b9f27ff-1fbe-4da5-be7d-eb3675d4c4bb",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "0455923d-d40e-40e5-a151-bb932f3d1507",
          "265bbf40-7c9a-4540-8340-e10072e21a1d",
          "3b9f27ff-1fbe-4da5-be7d-eb3675d4c4bb"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "fc3724f1-40d8-4741-82b1-0fec9382b9ca",
        "title": "Reduce() function",
        "fullFile": "F:\\Homework\\chronicInkTattoosTest\\js-test-master\\js-test-master\\tasks\\6. Implement reduce\\__test__\\reduce.test.js",
        "file": "\\tasks\\6. Implement reduce\\__test__\\reduce.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should work with numbers.",
            "fullTitle": "Reduce() function should work with numbers.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var array = [1, 2, 3, 4, 5];\nvar reducer = function reducer(acc, curr) {\n  return acc += curr;\n};\nexpect((0, _reduce.Reduce)(array, reducer, 0)).to.equal(15);",
            "err": {},
            "isRoot": false,
            "uuid": "94c4d1ba-0c07-4d35-a66e-530f025bbc30",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should work with strings",
            "fullTitle": "Reduce() function should work with strings",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "var array = ['this ', 'is ', 'a ', 'string'];\nvar reducer = function reducer(acc, curr) {\n  return acc.concat(curr);\n};\nexpect((0, _reduce.Reduce)(array, reducer, '')).to.equal('this is a string');",
            "err": {
              "message": "AssertionError: expected '15this is a string' to equal 'this is a string'",
              "estack": "AssertionError: expected '15this is a string' to equal 'this is a string'\n    at Context.<anonymous> (tasks\\6. Implement reduce\\__test__\\reduce.test.js:24:56)\n    at processImmediate (internal/timers.js:464:21)",
              "diff": "- 15this is a string\n+ this is a string\n"
            },
            "isRoot": false,
            "uuid": "0d50650c-6245-4bd8-af47-9131a0fbe1de",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "94c4d1ba-0c07-4d35-a66e-530f025bbc30"
        ],
        "failures": [
          "0d50650c-6245-4bd8-af47-9131a0fbe1de"
        ],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "6a926051-22a8-4f45-93cd-b34028671c79",
        "title": "Circle.includes() function",
        "fullFile": "F:\\Homework\\chronicInkTattoosTest\\js-test-master\\js-test-master\\tasks\\7. Is Point inside Circle\\__test__\\circle.test.js",
        "file": "\\tasks\\7. Is Point inside Circle\\__test__\\circle.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should return FALSE if the point is outside the circle",
            "fullTitle": "Circle.includes() function should return FALSE if the point is outside the circle",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "var point = (0, _Point.default)(3, 4);\nvar circle = (0, _Circle.default)((0, _Point.default)(1, 2), 2);\nexpect(circle.includes(point)).to.equal(false);",
            "err": {
              "message": "AssertionError: expected true to equal false",
              "estack": "AssertionError: expected true to equal false\n    at Context.<anonymous> (tasks\\7. Is Point inside Circle\\__test__\\circle.test.js:15:39)\n    at processImmediate (internal/timers.js:464:21)",
              "diff": "- true\n+ false\n"
            },
            "isRoot": false,
            "uuid": "3fb79735-2326-45dd-9901-3b0ef574da8c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return TRUE if the point is inside the circle",
            "fullTitle": "Circle.includes() function should return TRUE if the point is inside the circle",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var point = (0, _Point.default)(3, 4);\nvar circle = (0, _Circle.default)((0, _Point.default)(1, 2), 3);\nexpect(circle.includes(point)).to.equal(true);",
            "err": {},
            "isRoot": false,
            "uuid": "ee98d5f0-70e8-4980-8b40-9b1082c419d1",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return TRUE if the point is tangential to the circle",
            "fullTitle": "Circle.includes() function should return TRUE if the point is tangential to the circle",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var point = (0, _Point.default)(3, 3);\nvar circle = (0, _Circle.default)((0, _Point.default)(1, 3), 2);\nexpect(circle.includes(point)).to.equal(true);",
            "err": {},
            "isRoot": false,
            "uuid": "9581e17d-280e-4b69-bbdd-52aacf571df1",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "ee98d5f0-70e8-4980-8b40-9b1082c419d1",
          "9581e17d-280e-4b69-bbdd-52aacf571df1"
        ],
        "failures": [
          "3fb79735-2326-45dd-9901-3b0ef574da8c"
        ],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2021
}